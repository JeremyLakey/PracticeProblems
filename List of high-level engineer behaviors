-Pr reviews take a lot of time, so they rather do a few good ones instead of rushing multiple. Most annoyingly, they happen to find spelling errorss. They pull down the branch and run the code locally, if applicable.

-Master their debugging tools. Often I see seniors build short code snippets and other debugging tools.

-Orginize research and notes for an optimal discussion. They form opinions but provide a highly organized discussion built around questions, flows, options, and pro/cons lists. Database changes and discussions often use rows of data included.

-Tasks are highly descriptive and specific. Any discussion or decisions are often captured in the specific of a task. Tasks are broken into their smallest parts with specific instructions. Often, they have other files or sections of code to use as examples.

-They plan and archect by different systems and their capabilities, limits, and dependencies. They value the opinions of others and seek feedback without delay.

-They ask questions quicker and faster. They unblock themselves by gaining confidence and context. Instead of worrying about what others think of them, they ask. A new high level engineer to the team, the highest of any before him, and he asks like 3-5 questions a day in the team slack channel. I can promise you, your not asking enough questions.